# -*- Python -*-

# Configuration file for the 'lit' test runner.

import os
import sys
import re
import platform

import lit.util
import lit.formats

# name: The name of this test suite.
config.name = 'AWSEncryptionSDK'

config.test_format = lit.formats.ShTest(execute_external=False)

# suffixes: A list of file extensions to treat as test files. This is overriden
# by individual lit.local.cfg files in the test subdirectories.
config.suffixes = ['.dfy']

# excludes: A list of directories to exclude from the testsuite. The 'Inputs'
# subdirectories contain auxiliary inputs for various tests in their parent
# directories.
config.excludes = ['Inputs', 'sandbox']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(os.path.abspath(__file__))

# test_exec_root: The root path where tests should be run.
config.test_exec_root = config.test_source_root

# Propagate 'HOME' through the environment.
if 'HOME' in os.environ:
    config.environment['HOME'] = os.environ['HOME']

# Propagate 'INCLUDE' through the environment.
if 'INCLUDE' in os.environ:
    config.environment['INCLUDE'] = os.environ['INCLUDE']

# Propagate 'LIB' through the environment.
if 'LIB' in os.environ:
    config.environment['LIB'] = os.environ['LIB']

# Propagate the temp directory. Windows requires this because it uses \Windows\
# if none of these are present.
if 'TMP' in os.environ:
    config.environment['TMP'] = os.environ['TMP']
if 'TEMP' in os.environ:
    config.environment['TEMP'] = os.environ['TEMP']

# Propagate PYTHON_EXECUTABLE into the environment
config.environment['PYTHON_EXECUTABLE'] = getattr(config, 'python_executable', '')

# Propagate 'NODE_PATH' through the environment.
if 'NODE_PATH' in os.environ:
    config.environment['NODE_PATH'] = os.environ['NODE_PATH']

# Propagate 'LOCALAPPDATA' into lit's environment
# Fixes error on Windows
#   build cache is required, but could not be located: 
#   GOCACHE is not defined and %LocalAppData% is not defined
if 'LOCALAPPDATA' in os.environ:
    config.environment['LOCALAPPDATA'] = os.environ['LOCALAPPDATA']

# Check that the object root is known.
if config.test_exec_root is None:
    lit_config.fatal('Could not determine execution root for tests!')

"""
   Function for quoting filepaths
   so that if they contain spaces
   lit's shell interpreter will
   treat the path as a single argument
"""
def quotePath(path):
    if ' ' in path:
        return '"{path}"'.format(path=path)
    else:
        return path

### Add Dafny specific substitutions

# Find Dafny.exe
up = os.path.dirname
repositoryRoot = up(
                     up( os.path.abspath(__file__) )
                   )
config.substitutions.append( ('%root', repositoryRoot) )

# Works in both Powershell and Cygwin
monoExecutable = ''
dafnyExecutable = ''
if platform.system() in {'Linux', 'Darwin'}:
    dafnyExecutable = lit.util.which("dafny")
else:
    dafnyExecutable = lit.util.which("Dafny.exe")
if dafnyExecutable == None:
    lit_config.fatal('Dafny is not in your PATH. Please install it.')
if platform.system() in {'Linux', 'Darwin'}:
    monoExecutable = lit.util.which('mono')
    if monoExecutable == None:
        lit_config.fatal('Cannot find mono. Make sure it is your PATH')

# Expected output does not contain logo
dafnyExecutable += ' -nologo -countVerificationErrors:0'

# We do not want absolute or relative paths in error messages, just the basename of the file
dafnyExecutable += ' -useBaseNameForFileName'   

# We do not want output such as "Compiled program written to Foo.cs"
# from the compilers, since that changes with the target language
dafnyExecutable += ' -compileVerbose:0'

# Allow user to provide extra arguments to Dafny
dafnyParams = lit_config.params.get('dafny_params','')
if len(dafnyParams) > 0:
    dafnyExecutable = dafnyExecutable + ' ' + dafnyParams

# AWS and KMS SDKs
awslib = '../../lib/AWSSDK.Core.3.3.103.62/lib/net45/AWSSDK.Core.dll'
kmslib = '../../lib/AWSSDK.KeyManagementService.3.3.101.83/lib/net45/AWSSDK.KeyManagementService.dll'

# Dafny executable with connections to BouncyCast library
bclib = '../../lib/BouncyCastle.1.8.5/lib/BouncyCastle.Crypto.dll'
bcdafny = dafnyExecutable + ' ../../src/extern/dotnet/HKDF-extern.cs ../../src/extern/dotnet/Arrays-extern.cs ' + bclib

config.substitutions.append( ('%dafny', dafnyExecutable) )

config.substitutions.append( ('%bcdafny', bcdafny) )
config.substitutions.append( ('%bclib', bclib) )

config.substitutions.append( ('%mono', monoExecutable) )

config.substitutions.append( ('%awslib', awslib) )
config.substitutions.append( ('%kmslib', kmslib) )

# Add diff tool substitution
commonDiffFlags=' --unified=3 --strip-trailing-cr'

diffExecutable = lit.util.which('diff')
if diffExecutable == None:
    lit_config.fatal('Unsupported platform')
diffExecutable = diffExecutable + commonDiffFlags

config.substitutions.append( ('%diff', diffExecutable ))

# Detect the OutputCheck tool
outputCheckPath = lit.util.which('OutputCheck')
if outputCheckPath == None:
    lit_config.fatal('The OutputCheck tool is not in your PATH. Please install it.')

config.substitutions.append( ('%OutputCheck', outputCheckPath + ' --dump-file-to-check') )

config.substitutions.append( ('%{dirsep}', os.sep) )
