#
# This local action serves two purposes:
#
# 1. For core workflows like pull.yml and push.yml,
#    it is uses to check that the checked in copy of generated code
#    matches what the current submodule version of smithy-dafny generates.
#    This is important to ensure whenever someone changes the models
#    or needs to regenerate to pick up smithy-dafny improvements,
#    they don't have to deal with unpleasant surprises.
#
# 2. For workflows that check compatibility with other Dafny versions,
#    such as nightly_dafny.yml, it is necessary to regenerate the code
#    for that version of Dafny first.
#    This is ultimately because some of the code smithy-dafny generates
#    is tightly coupled to what code Dafny itself generates.
#    A concrete example is that Dafny 4.3 added TypeDescriptors
#    as parameters when constructing datatypes like Option and Result.
#
#    This is why this is a composite action instead of a reusable workflow:
#    the latter executes in a separate runner environment,
#    but here we need to actually overwrite the generated code in place
#    so that subsequent steps can work correctly.
#
# This action assumes that the given version of Dafny and .NET 6.0.x
# have already been set up, since they are used to format generated code.
#
# Note that recursively generating code doesn't currently work in this repo
# with the version of the mpl pinned by the submodule,
# because the SharedMakefileV2.mk in it doesn't work with newer versions of smithy-dafny.
# Therefore by default we don't recursively regenerate code
# (accomplished by setting the POLYMORPH_DEPENDENCIES environment variable to "").
# If `update-and-regenerate-mpl` is true, we first pull the latest mpl,
# which is necessary both for Makefile compatibility and so we can regenerate mpl code
# for compatibility with newer versions of Dafny.
#

name: "Polymorph code generation"
description: "Regenerates code using smithy-dafny, and optionally checks that the result matches the checked in state"
inputs:
  dafny:
    description: "The Dafny version to run"
    required: true
    type: string
  library:
    description: "Name of the library to regenerate code for"
    required: true
    type: string
  diff-generated-code:
    description: "Diff regenerated code against committed state"
    required: true
    type: boolean
  update-and-regenerate-mpl:
    description: "Locally update MPL to the tip of master and regenerate its code too"
    required: false
    default: false
    type: boolean
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
    # Replace the project.properties file so that we pick up the right runtimes etc.,
    # in cases where inputs.dafny is different from the current value in that file.
    - name: Update top-level project.properties file
      env:
        DAFNY_VERSION: ${{ inputs.dafny }}
      shell: bash
      run: |
        make generate_properties_file

    - name: Update MPL submodule locally
      if: inputs.update-and-regenerate-mpl == 'true'
      shell: bash
      run: |
        git submodule update --init --recursive --remote --merge mpl

    - name: Don't regenerate dependencies
      if: inputs.update-and-regenerate-mpl != 'true'
      shell: bash
      run: |
        echo "POLYMORPH_DEPENDENCIES=" >> $GITHUB_ENV

    - name: Regenerate Dafny code using smithy-dafny
      # Unfortunately Dafny codegen doesn't work on Windows:
      # https://github.com/smithy-lang/smithy-dafny/issues/317
      if: runner.os != 'Windows'
      working-directory: ./${{ inputs.library }}
      shell: bash
      run: |
        make polymorph_dafny

    - name: Regenerate Java code using smithy-dafny
      # npx seems to be unavailable on Windows GHA runners,
      # so we don't regenerate Java code on them either.
      if: runner.os != 'Windows'
      working-directory: ./${{ inputs.library }}
      shell: bash
      # smithy-dafny also formats generated code itself now,
      # so prettier is a necessary dependency.
      run: |
        make -C .. setup_prettier
        make polymorph_java

    - name: Regenerate .NET code using smithy-dafny
      working-directory: ./${{ inputs.library }}
      shell: bash
      run: |
        make polymorph_dotnet

    - name: Check regenerated code against commited code
      # Composite action inputs seem to not actually support booleans properly for some reason
      if: inputs.diff-generated-code == 'true'
      working-directory: ./${{ inputs.library }}
      shell: bash
      run: |
        make check_polymorph_diff
