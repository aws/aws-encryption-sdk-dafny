# This workflow performs tests in Rust.
name: Library Rust tests

on: 
  workflow_call:
    inputs:
      dafny:
        description: 'The Dafny version to run'
        required: true
        type: string  
      regenerate-code:
        description: "Regenerate code using smithy-dafny"
        required: false
        default: false
        type: boolean

env:
  # Used for Test Vectors
  VECTORS_URL: https://github.com/awslabs/aws-encryption-sdk-test-vectors/raw/master/vectors/awses-decrypt/python-2.3.0.zip

jobs:
  testRust:
    strategy:
      fail-fast: false
      matrix:
        os: [
          windows-latest,
          ubuntu-latest,
          macos-12,
        ]
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
    env:
      # TODO: do we need this here?
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1
    steps:
      - name: Support longpaths on Git checkout
        run: |
          git config --global core.longpaths true
      - uses: actions/checkout@v2
      - name: Init Submodules
        shell: bash
        run: |
          git submodule update --init libraries
          git submodule update --init --recursive mpl
          git submodule update --init smithy-dafny
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::370957321024:role/GitHub-CI-Public-ESDK-Dafny-Role-us-west-2 
          role-session-name: RustTests
          
      - name: Setup Rust Toolchain for GitHub CI
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
        with:
          components: rustfmt
      # TODO - uncomment this after Rust formatter works
      # - name: Rustfmt Check
      #   uses: actions-rust-lang/rustfmt@v1

      - name: Setup Dafny
        # TODO: Use setup-dafny-actions@v1.7.0 for Rust instead of rust-unsound branch
        # uses: dafny-lang/setup-dafny-action@v1.7.0
        # with:
        #   dafny-version: ${{ inputs.dafny }}
        shell: bash
        run: |
          git clone https://github.com/dafny-lang/dafny.git --recurse-submodules
          cd dafny/
          git checkout rust-unsound
          make exe
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "${{ github.workspace }}/dafny/Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          else
            echo ${{ github.workspace }}/dafny/Scripts >> $GITHUB_PATH
      
      # TODO: Remove this after the formatting in Rust starts working
      - name: smithy-dafny Rust hacks
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            sed -i '' 's|rustfmt --edition 2021 runtimes/rust/src/implementation_from_dafny.rs|#&|' smithy-dafny/SmithyDafnyMakefile.mk
          else
            sed -i 's|rustfmt --edition 2021 runtimes/rust/src/implementation_from_dafny.rs|#&|' smithy-dafny/SmithyDafnyMakefile.mk

      - name: Regenerate code using smithy-dafny if necessary
        if: ${{ inputs.regenerate-code }}
        uses: ./.github/actions/polymorph_codegen
        with:
          dafny: ${{ env.DAFNY_VERSION }}
          library: AwsEncryptionSDK
          diff-generated-code: false
          update-and-regenerate-mpl: true

      - name: Compile AwsEncryptionSDK implementation
        shell: bash
        working-directory: ./AwsEncryptionSDK
        run: |
          # This works because `node` is installed by default on GHA runners
          CORES=$(node -e 'console.log(os.cpus().length)')
          make transpile_rust CORES=$CORES

    
      # - name: Compile MPL TestVectors implementation
      #   shell: bash
      #   working-directory: ./mpl/TestVectorsAwsCryptographicMaterialProviders
      #   run: |
      #     # This works because `node` is installed by default on GHA runners
      #     CORES=$(node -e 'console.log(os.cpus().length)')
      #     make transpile_rust CORES=$CORES

      - name: Test Rust
        working-directory: ./AwsEncryptionSDK
        if: matrix.os == 'windows-latest' 
        shell: bash
        run: |
          make test_rust

      - name: Test Examples for Rust
        working-directory: ./AwsEncryptionSDK
        if: matrix.os == 'windows-latest' 
        shell: bash
        run: |
          cargo test --examples