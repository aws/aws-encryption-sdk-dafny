version: 0.2

env:
  variables:
    VECTORS_URL: >-
      https://github.com/awslabs/aws-encryption-sdk-test-vectors/raw/master/vectors/awses-decrypt/python-2.3.0.zip

phases:
  install:
    runtime-versions:
      dotnet: 6.0
      python: 3.x
    commands:
      - cd ..
      # Get Dafny
      - curl https://github.com/dafny-lang/dafny/releases/download/v4.8.0/dafny-4.8.0-x64-ubuntu-20.04.zip  -L -o dafny.zip
      - unzip -qq dafny.zip && rm dafny.zip
      - export PATH="$PWD/dafny:$PATH"
      # install mono to run net48 copied from 
      # https://www.mono-project.com/download/stable/#download-lin
      - sudo apt install ca-certificates gnupg
      - sudo gpg --homedir /tmp --no-default-keyring --keyring /usr/share/keyrings/mono-official-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
      - echo "deb [signed-by=/usr/share/keyrings/mono-official-archive-keyring.gpg] https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
      - sudo apt update
      - sudo apt-get install mono-devel -y
      # Switch back to the main directory
      - cd aws-encryption-sdk-dafny/AwsEncryptionSDK
  pre_build:
    commands:
      - make transpile_net
  build:
    commands:
      - export VERSION=`grep '<Version>' runtimes/net/ESDK.csproj | sed 's/.*<Version>\(.*\)<\/Version>/\1/'`
      - sed -i.backup  "/\<ProjectReference Include=\"..\/ESDK.csproj\" \/>/d" runtimes/net/tests/Test-ESDK.csproj
      - dotnet add runtimes/net/tests/Test-ESDK.csproj package AWS.Cryptography.EncryptionSDK --version $VERSION
      
       # run tests
      - TMP_ROLE=$(aws sts assume-role --role-arn "arn:aws:iam::370957321024:role/GitHub-CI-MPL-Dafny-Role-us-west-2" --role-session-name "CB-TestVectorResources")
      - export TMP_ROLE                                                                                                                                          
      - export AWS_ACCESS_KEY_ID=$(echo "${TMP_ROLE}" | jq -r '.Credentials.AccessKeyId')                                                                        
      - export AWS_SECRET_ACCESS_KEY=$(echo "${TMP_ROLE}" | jq -r '.Credentials.SecretAccessKey')                                                                
      - export AWS_SESSION_TOKEN=$(echo "${TMP_ROLE}" | jq -r '.Credentials.SessionToken')                                                                       
      - aws sts get-caller-identity
      - make test_net
      
      # add released artifact to testvectors
      - sed -i.backup  "/\<ProjectReference Include=\"..\/..\/ESDK.csproj\" \/>/d" runtimes/net/TestVectorsNative/TestVectorLib/AWSEncryptionSDKTestVectorLib.csproj
      - dotnet add runtimes/net/TestVectorsNative/TestVectorLib/AWSEncryptionSDKTestVectorLib.csproj package AWS.Cryptography.EncryptionSDK --version $VERSION
      
      # Fetch awses-decrypt/python-2.3.0.zip
      - cd ../
      - pwd
      - export PYTHON_23_VECTOR_PATH=$(pwd)/python23/vectors
      - mkdir -p $PYTHON_23_VECTOR_PATH
      - export DOWNLOAD_NAME=python23.zip
      - curl --no-progress-meter --output $DOWNLOAD_NAME --location $VECTORS_URL
      - unzip -o -qq $DOWNLOAD_NAME  -d $PYTHON_23_VECTOR_PATH
      - rm $DOWNLOAD_NAME

      # Run Decrypt Test Vectors on .NET Framework net48
      - cd ./AwsEncryptionSDK/runtimes/net/TestVectorsNative/TestVectors
      - export DAFNY_AWS_ESDK_TEST_VECTOR_MANIFEST_PATH="$PYTHON_23_VECTOR_PATH/manifest.json" \
      - dotnet test --framework net48

      # Run Decrypt Test Vectors on .NET net6.0
      - dotnet test --framework net6.0

      # Generate Test Vectors with .NET Framework net6.0
      - cd ../../../../
      - export NET_41_VECTOR_PATH=$(pwd)/net41/vectors
      - mkdir -p $NET_41_VECTOR_PATH
      - GEN_PATH=runtimes/net/TestVectorsNative/TestVectorGenerator
      - >-
        dotnet run --project $GEN_PATH --framework net6.0 -- \
            --encrypt-manifest $GEN_PATH/resources/0006-awses-message-decryption-generation.v2.json \
            --output-dir $NET_41_VECTOR_PATH
      
      # Zip the Generated Test Vectors for ESDK-JS on Mac/Linux
      - cd $NET_41_VECTOR_PATH
      - zip -qq net41.zip -r .

      # Decrypt Generated Test Vectors with ESDK-JS
      - npx -y @aws-crypto/integration-node decrypt -v $NET_41_VECTOR_PATH/net41.zip -c cpu

