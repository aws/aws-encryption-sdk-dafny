version: 0.2

env:
  variables:
    AWS_ENCRYPTION_SDK_EXAMPLE_KMS_KEY_ID: >-
      arn:aws:kms:us-west-2:658956600833:key/b3537ef1-d8dc-4780-9f5a-55776cbb2f7f
    AWS_ENCRYPTION_SDK_EXAMPLE_KMS_KEY_ID_2: >-
      arn:aws:kms:eu-central-1:658956600833:key/75414c93-5285-4b57-99c9-30c1cf0a22c2
    AWS_ENCRYPTION_SDK_EXAMPLE_KMS_MRK_KEY_ID: >-
      arn:aws:kms:us-east-1:658956600833:key/mrk-80bd8ecdcd4342aebd84b7dc9da498a7
    AWS_ENCRYPTION_SDK_EXAMPLE_KMS_MRK_KEY_ID_2: >-
      arn:aws:kms:eu-west-1:658956600833:key/mrk-80bd8ecdcd4342aebd84b7dc9da498a7
    AWS_ENCRYPTION_SDK_EXAMPLE_LIMITED_ROLE_ARN_US_EAST_1: >-
      arn:aws:iam::587316601012:role/GitHub-DotNet-KMS-US-East-1-Only
    AWS_ENCRYPTION_SDK_EXAMPLE_LIMITED_ROLE_ARN_EU_WEST_1: >-
      arn:aws:iam::587316601012:role/GitHub-DotNet-KMS-EU-West-1-Only
    VECTORS_URL: >-
      https://github.com/awslabs/aws-encryption-sdk-test-vectors/raw/master/vectors/awses-decrypt/python-2.3.0.zip


phases:
  install:
    runtime-versions:
      dotnet: 6.0
      python: 3.x
    commands:
      - cd ..
      # Get Dafny
      - curl https://github.com/dafny-lang/dafny/releases/download/v4.2.0/dafny-4.2.0-x64-ubuntu-20.04.zip  -L -o dafny.zip
      - unzip -qq dafny.zip && rm dafny.zip
      - export PATH="$PWD/dafny:$PATH"
      # install mono to run net48 copied from 
      # https://www.mono-project.com/download/stable/#download-lin
      - sudo apt install ca-certificates gnupg
      - sudo gpg --homedir /tmp --no-default-keyring --keyring /usr/share/keyrings/mono-official-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
      - echo "deb [signed-by=/usr/share/keyrings/mono-official-archive-keyring.gpg] https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
      - sudo apt update
      - sudo apt-get install mono-devel -y
      # Switch back to the main directory
      - cd private-aws-encryption-sdk-dafny-staging/AwsEncryptionSDK
  pre_build:
    commands:
      # UNIQUE_ID should be passed in as an environment variable. It is used to tie
      # the different parts of the asynchronous signing process together
      - echo "Using unique id for flow $UNIQUE_ID"
      #  Build unsigned source
      - make transpile_net
      - dotnet build runtimes/net /p:Configuration=Release -nowarn:CS0162,CS0168
      # This step assumes signing has already happened and we just need to retrieve
      # the signed artifacts
      # Build unsigned source
      - dotnet build runtimes/net /p:Configuration=Release -nowarn:CS0162,CS0168
      # This step assumes signing has already happened and we just need to retrieve 
      # the signed artifacts
      - export BASE=codebuild/release
      - python $BASE/retrieve_signed_assembly.py --target net6.0 --unique-id $UNIQUE_ID
      - python $BASE/retrieve_signed_assembly.py --target net48 --unique-id $UNIQUE_ID
  build:
    commands:
      - mkdir build
      - >-
        aws codeartifact login \
            --region us-east-1 \
            --tool dotnet \
            --domain crypto-tools-internal \
            --repository esdk-net-staging \
            --domain-owner 587316601012
      # Set a unique version for releasing to staging, because this may fail and we don't
      # want to collide with previous runs
      - export VERSION=`grep '<Version>' runtimes/net/ESDK.csproj | sed 's/.*<Version>\(.*\)<\/Version>/\1/'`
      - dotnet pack runtimes/net/ESDK.csproj --no-build /p:Configuration=Release,Version=$VERSION --output build
      - dotnet nuget push build/AWS.Cryptography.EncryptionSDK.$VERSION.nupkg --source crypto-tools-internal/esdk-net-staging
      # Now validate we can run examples
      - sed -i.backup  "/\<ProjectReference Include=\"..\/ESDK.csproj\" \/>/d" runtimes/net/tests/Test-ESDK.csproj
      - dotnet add runtimes/net/tests/Test-ESDK.csproj package AWS.Cryptography.EncryptionSDK --version $VERSION

      # run tests
      - TMP_ROLE=$(aws sts assume-role --role-arn "arn:aws:iam::370957321024:role/GitHub-CI-MPL-Dafny-Role-us-west-2" --role-session-name "CB-TestVectorResources")
      - export TMP_ROLE                                                                                                                                          
      - export AWS_ACCESS_KEY_ID=$(echo "${TMP_ROLE}" | jq -r '.Credentials.AccessKeyId')                                                                        
      - export AWS_SECRET_ACCESS_KEY=$(echo "${TMP_ROLE}" | jq -r '.Credentials.SecretAccessKey')                                                                
      - export AWS_SESSION_TOKEN=$(echo "${TMP_ROLE}" | jq -r '.Credentials.SessionToken')                                                                       
      - aws sts get-caller-identity
      - make test_net

      # add staged artifact to testvectors
      - sed -i.backup  "/\<ProjectReference Include=\"..\/..\/ESDK.csproj\" \/>/d" runtimes/net/TestVectorsNative/TestVectorLib/AWSEncryptionSDKTestVectorLib.csproj
      - dotnet add runtimes/net/TestVectorsNative/TestVectorLib/AWSEncryptionSDKTestVectorLib.csproj package AWS.Cryptography.EncryptionSDK --version $VERSION

      # Fetch awses-decrypt/python-2.3.0.zip
      - cd ../
      - pwd
      - export PYTHON_23_VECTOR_PATH=$(pwd)/python23/vectors
      - mkdir -p $PYTHON_23_VECTOR_PATH
      - export DOWNLOAD_NAME=python23.zip
      - curl --no-progress-meter --output $DOWNLOAD_NAME --location $VECTORS_URL
      - unzip -o -qq $DOWNLOAD_NAME  -d $PYTHON_23_VECTOR_PATH
      - rm $DOWNLOAD_NAME

      # Run Decrypt Test Vectors on .NET Framework net48
      - cd ./AwsEncryptionSDK/runtimes/net/TestVectorsNative/TestVectors
      - export DAFNY_AWS_ESDK_TEST_VECTOR_MANIFEST_PATH="$PYTHON_23_VECTOR_PATH/manifest.json" \
      - dotnet test --framework net48

      # Run Decrypt Test Vectors on .NET net6.0
      - dotnet test --framework net6.0

      # Generate Test Vectors with .NET Framework net6.0
      - cd ../../../../
      - export NET_41_VECTOR_PATH=$(pwd)/net41/vectors
      - mkdir -p $NET_41_VECTOR_PATH
      - GEN_PATH=runtimes/net/TestVectorsNative/TestVectorGenerator
      - >-
        dotnet run --project $GEN_PATH --framework net6.0 -- \
            --encrypt-manifest $GEN_PATH/resources/0006-awses-message-decryption-generation.v2.json \
            --output-dir $NET_41_VECTOR_PATH
      
      # Zip the Generated Test Vectors for ESDK-JS on Mac/Linux
      - cd $NET_41_VECTOR_PATH
      - zip -qq net41.zip -r .

      # Decrypt Generated Test Vectors with ESDK-JS
      - npx -y @aws-crypto/integration-node decrypt -v $NET_41_VECTOR_PATH/net41.zip -c cpu
