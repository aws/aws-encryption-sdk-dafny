diff --git a/AwsEncryptionSDK/codegen-patches/java/dafny-4.8.1.patch b/AwsEncryptionSDK/codegen-patches/java/dafny-4.8.1.patch
index 6512cb85..e69de29b 100644
--- a/AwsEncryptionSDK/codegen-patches/java/dafny-4.8.1.patch
+++ b/AwsEncryptionSDK/codegen-patches/java/dafny-4.8.1.patch
@@ -1,19 +0,0 @@
-diff --git a/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/model/EncryptInput.java b/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/model/EncryptInput.java
-index 67ac1304..7282539c 100644
---- a/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/model/EncryptInput.java
-+++ b/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/model/EncryptInput.java
-@@ -192,7 +192,7 @@ public class EncryptInput {
-           "`frameLength` must be greater than or equal to 1"
-         );
-       }
--      if (this._frameLengthSet && this.frameLength() > 4294967296) {
-+      if (this._frameLengthSet && this.frameLength() > 4294967296L) {
-         throw new IllegalArgumentException(
-           "`frameLength` must be less than or equal to 4294967296."
-         );
-diff --git a/mpl b/mpl
---- a/mpl
-+++ b/mpl
-@@ -1 +1 @@
--Subproject commit ea0fe508dca214b9c9bdaf0fc21122e83971ef1b
-+Subproject commit ea0fe508dca214b9c9bdaf0fc21122e83971ef1b-dirty
diff --git a/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/ToDafny.java b/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/ToDafny.java
index 4a9bbfea..e83bfcf9 100644
--- a/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/ToDafny.java
+++ b/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/ToDafny.java
@@ -42,11 +42,25 @@ public class ToDafny {
     if (nativeValue instanceof CollectionOfErrors) {
       return ToDafny.Error((CollectionOfErrors) nativeValue);
     }
-    return Error.create_Opaque(nativeValue);
+    return Error.create_Opaque(
+      nativeValue,
+      dafny.DafnySequence.asString(
+        java.util.Objects.nonNull(nativeValue.getMessage())
+          ? nativeValue.getMessage()
+          : ""
+      )
+    );
   }
 
   public static Error Error(OpaqueError nativeValue) {
-    return Error.create_Opaque(nativeValue.obj());
+    return Error.create_Opaque(
+      nativeValue.obj(),
+      dafny.DafnySequence.asString(
+        java.util.Objects.nonNull(nativeValue.altText())
+          ? nativeValue.altText()
+          : ""
+      )
+    );
   }
 
   public static Error Error(CollectionOfErrors nativeValue) {
@@ -70,27 +84,27 @@ public class ToDafny {
     commitmentPolicy =
       Objects.nonNull(nativeValue.commitmentPolicy())
         ? Option.create_Some(
-          ESDKCommitmentPolicy._typeDescriptor(),
-          software.amazon.cryptography.materialproviders.ToDafny.ESDKCommitmentPolicy(
-            nativeValue.commitmentPolicy()
-          )
+        ESDKCommitmentPolicy._typeDescriptor(),
+        software.amazon.cryptography.materialproviders.ToDafny.ESDKCommitmentPolicy(
+          nativeValue.commitmentPolicy()
         )
+      )
         : Option.create_None(ESDKCommitmentPolicy._typeDescriptor());
     Option<Long> maxEncryptedDataKeys;
     maxEncryptedDataKeys =
       Objects.nonNull(nativeValue.maxEncryptedDataKeys())
         ? Option.create_Some(
-          TypeDescriptor.LONG,
-          (nativeValue.maxEncryptedDataKeys())
-        )
+        TypeDescriptor.LONG,
+        (nativeValue.maxEncryptedDataKeys())
+      )
         : Option.create_None(TypeDescriptor.LONG);
     Option<NetV4__0__0__RetryPolicy> netV4_0_0_RetryPolicy;
     netV4_0_0_RetryPolicy =
       Objects.nonNull(nativeValue.netV4_0_0_RetryPolicy())
         ? Option.create_Some(
-          NetV4__0__0__RetryPolicy._typeDescriptor(),
-          ToDafny.NetV4_0_0_RetryPolicy(nativeValue.netV4_0_0_RetryPolicy())
-        )
+        NetV4__0__0__RetryPolicy._typeDescriptor(),
+        ToDafny.NetV4_0_0_RetryPolicy(nativeValue.netV4_0_0_RetryPolicy())
+      )
         : Option.create_None(NetV4__0__0__RetryPolicy._typeDescriptor());
     return new AwsEncryptionSdkConfig(
       commitmentPolicy,
@@ -111,11 +125,11 @@ public class ToDafny {
     materialsManager =
       Objects.nonNull(nativeValue.materialsManager())
         ? Option.create_Some(
-          TypeDescriptor.reference(ICryptographicMaterialsManager.class),
-          software.amazon.cryptography.materialproviders.ToDafny.CryptographicMaterialsManager(
-            nativeValue.materialsManager()
-          )
+        TypeDescriptor.reference(ICryptographicMaterialsManager.class),
+        software.amazon.cryptography.materialproviders.ToDafny.CryptographicMaterialsManager(
+          nativeValue.materialsManager()
         )
+      )
         : Option.create_None(
           TypeDescriptor.reference(ICryptographicMaterialsManager.class)
         );
@@ -123,30 +137,30 @@ public class ToDafny {
     keyring =
       Objects.nonNull(nativeValue.keyring())
         ? Option.create_Some(
-          TypeDescriptor.reference(IKeyring.class),
-          software.amazon.cryptography.materialproviders.ToDafny.Keyring(
-            nativeValue.keyring()
-          )
+        TypeDescriptor.reference(IKeyring.class),
+        software.amazon.cryptography.materialproviders.ToDafny.Keyring(
+          nativeValue.keyring()
         )
+      )
         : Option.create_None(TypeDescriptor.reference(IKeyring.class));
     Option<
       DafnyMap<
         ? extends DafnySequence<? extends Byte>,
         ? extends DafnySequence<? extends Byte>
-      >
-    > encryptionContext;
+        >
+      > encryptionContext;
     encryptionContext =
       (Objects.nonNull(nativeValue.encryptionContext()) &&
-          nativeValue.encryptionContext().size() > 0)
+        nativeValue.encryptionContext().size() > 0)
         ? Option.create_Some(
-          DafnyMap._typeDescriptor(
-            DafnySequence._typeDescriptor(TypeDescriptor.BYTE),
-            DafnySequence._typeDescriptor(TypeDescriptor.BYTE)
-          ),
-          software.amazon.cryptography.materialproviders.ToDafny.EncryptionContext(
-            nativeValue.encryptionContext()
-          )
+        DafnyMap._typeDescriptor(
+          DafnySequence._typeDescriptor(TypeDescriptor.BYTE),
+          DafnySequence._typeDescriptor(TypeDescriptor.BYTE)
+        ),
+        software.amazon.cryptography.materialproviders.ToDafny.EncryptionContext(
+          nativeValue.encryptionContext()
         )
+      )
         : Option.create_None(
           DafnyMap._typeDescriptor(
             DafnySequence._typeDescriptor(TypeDescriptor.BYTE),
@@ -172,7 +186,7 @@ public class ToDafny {
     DafnyMap<
       ? extends DafnySequence<? extends Byte>,
       ? extends DafnySequence<? extends Byte>
-    > encryptionContext;
+      > encryptionContext;
     encryptionContext =
       software.amazon.cryptography.materialproviders.ToDafny.EncryptionContext(
         nativeValue.encryptionContext()
@@ -197,20 +211,20 @@ public class ToDafny {
       DafnyMap<
         ? extends DafnySequence<? extends Byte>,
         ? extends DafnySequence<? extends Byte>
-      >
-    > encryptionContext;
+        >
+      > encryptionContext;
     encryptionContext =
       (Objects.nonNull(nativeValue.encryptionContext()) &&
-          nativeValue.encryptionContext().size() > 0)
+        nativeValue.encryptionContext().size() > 0)
         ? Option.create_Some(
-          DafnyMap._typeDescriptor(
-            DafnySequence._typeDescriptor(TypeDescriptor.BYTE),
-            DafnySequence._typeDescriptor(TypeDescriptor.BYTE)
-          ),
-          software.amazon.cryptography.materialproviders.ToDafny.EncryptionContext(
-            nativeValue.encryptionContext()
-          )
+        DafnyMap._typeDescriptor(
+          DafnySequence._typeDescriptor(TypeDescriptor.BYTE),
+          DafnySequence._typeDescriptor(TypeDescriptor.BYTE)
+        ),
+        software.amazon.cryptography.materialproviders.ToDafny.EncryptionContext(
+          nativeValue.encryptionContext()
         )
+      )
         : Option.create_None(
           DafnyMap._typeDescriptor(
             DafnySequence._typeDescriptor(TypeDescriptor.BYTE),
@@ -221,11 +235,11 @@ public class ToDafny {
     materialsManager =
       Objects.nonNull(nativeValue.materialsManager())
         ? Option.create_Some(
-          TypeDescriptor.reference(ICryptographicMaterialsManager.class),
-          software.amazon.cryptography.materialproviders.ToDafny.CryptographicMaterialsManager(
-            nativeValue.materialsManager()
-          )
+        TypeDescriptor.reference(ICryptographicMaterialsManager.class),
+        software.amazon.cryptography.materialproviders.ToDafny.CryptographicMaterialsManager(
+          nativeValue.materialsManager()
         )
+      )
         : Option.create_None(
           TypeDescriptor.reference(ICryptographicMaterialsManager.class)
         );
@@ -233,21 +247,21 @@ public class ToDafny {
     keyring =
       Objects.nonNull(nativeValue.keyring())
         ? Option.create_Some(
-          TypeDescriptor.reference(IKeyring.class),
-          software.amazon.cryptography.materialproviders.ToDafny.Keyring(
-            nativeValue.keyring()
-          )
+        TypeDescriptor.reference(IKeyring.class),
+        software.amazon.cryptography.materialproviders.ToDafny.Keyring(
+          nativeValue.keyring()
         )
+      )
         : Option.create_None(TypeDescriptor.reference(IKeyring.class));
     Option<ESDKAlgorithmSuiteId> algorithmSuiteId;
     algorithmSuiteId =
       Objects.nonNull(nativeValue.algorithmSuiteId())
         ? Option.create_Some(
-          ESDKAlgorithmSuiteId._typeDescriptor(),
-          software.amazon.cryptography.materialproviders.ToDafny.ESDKAlgorithmSuiteId(
-            nativeValue.algorithmSuiteId()
-          )
+        ESDKAlgorithmSuiteId._typeDescriptor(),
+        software.amazon.cryptography.materialproviders.ToDafny.ESDKAlgorithmSuiteId(
+          nativeValue.algorithmSuiteId()
         )
+      )
         : Option.create_None(ESDKAlgorithmSuiteId._typeDescriptor());
     Option<Long> frameLength;
     frameLength =
@@ -275,7 +289,7 @@ public class ToDafny {
     DafnyMap<
       ? extends DafnySequence<? extends Byte>,
       ? extends DafnySequence<? extends Byte>
-    > encryptionContext;
+      > encryptionContext;
     encryptionContext =
       software.amazon.cryptography.materialproviders.ToDafny.EncryptionContext(
         nativeValue.encryptionContext()
@@ -302,21 +316,21 @@ public class ToDafny {
   ) {
     switch (nativeValue) {
       case FORBID_RETRY:
-        {
-          return NetV4__0__0__RetryPolicy.create_FORBID__RETRY();
-        }
+      {
+        return NetV4__0__0__RetryPolicy.create_FORBID__RETRY();
+      }
       case ALLOW_RETRY:
-        {
-          return NetV4__0__0__RetryPolicy.create_ALLOW__RETRY();
-        }
+      {
+        return NetV4__0__0__RetryPolicy.create_ALLOW__RETRY();
+      }
       default:
-        {
-          throw new RuntimeException(
-            "Cannot convert " +
+      {
+        throw new RuntimeException(
+          "Cannot convert " +
             nativeValue +
             " to software.amazon.cryptography.encryptionsdk.internaldafny.types.NetV4__0__0__RetryPolicy."
-          );
-        }
+        );
+      }
     }
   }
 
diff --git a/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/model/EncryptInput.java b/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/model/EncryptInput.java
index 67ac1304..7282539c 100644
--- a/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/model/EncryptInput.java
+++ b/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/model/EncryptInput.java
@@ -192,7 +192,7 @@ public class EncryptInput {
           "`frameLength` must be greater than or equal to 1"
         );
       }
-      if (this._frameLengthSet && this.frameLength() > 4294967296) {
+      if (this._frameLengthSet && this.frameLength() > 4294967296L) {
         throw new IllegalArgumentException(
           "`frameLength` must be less than or equal to 4294967296."
         );
diff --git a/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/model/OpaqueError.java b/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/model/OpaqueError.java
index c24a0e9e..2fb2fd63 100644
--- a/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/model/OpaqueError.java
+++ b/AwsEncryptionSDK/runtimes/java/src/main/smithy-generated/software/amazon/cryptography/encryptionsdk/model/OpaqueError.java
@@ -10,8 +10,14 @@ public class OpaqueError extends RuntimeException {
    */
   private final Object obj;
 
+  /**
+   * A best effort text representation of obj.
+   */
+  private final String altText;
+
   protected OpaqueError(BuilderImpl builder) {
     super(messageFromBuilder(builder), builder.cause());
+    this.altText = builder.altText();
     this.obj = builder.obj();
   }
 
@@ -46,6 +52,13 @@ public class OpaqueError extends RuntimeException {
     return this.obj;
   }
 
+  /**
+   * @return A best effort text representation of obj.
+   */
+  public String altText() {
+    return this.altText;
+  }
+
   public Builder toBuilder() {
     return new BuilderImpl(this);
   }
@@ -85,6 +98,16 @@ public class OpaqueError extends RuntimeException {
      */
     Object obj();
 
+    /**
+     * @param altText A best effort text representation of obj.
+     */
+    Builder altText(String altText);
+
+    /**
+     * @return A best effort text representation of obj.
+     */
+    String altText();
+
     OpaqueError build();
   }
 
@@ -96,6 +119,8 @@ public class OpaqueError extends RuntimeException {
 
     protected Object obj;
 
+    protected String altText;
+
     protected BuilderImpl() {}
 
     protected BuilderImpl(OpaqueError model) {
@@ -131,6 +156,15 @@ public class OpaqueError extends RuntimeException {
       return this.obj;
     }
 
+    public Builder altText(String altText) {
+      this.altText = altText;
+      return this;
+    }
+
+    public String altText() {
+      return this.altText;
+    }
+
     public OpaqueError build() {
       if (
         this.obj != null && this.cause == null && this.obj instanceof Throwable
